<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.emmanuel.account.mapper.AccountMoneyMapper">
    <resultMap type="com.ruoyi.project.emmanuel.account.domain.AccountMoney" id="AccountMoneyResult">
        <result property="id" column="id"/>
        <result property="accountId" column="account_id"/>
        <result property="classId" column="class_id"/>
        <result property="money" column="money"/>
        <result property="moneyIntroduce" column="money_introduce"/>
        <result property="isTotal" column="is_total"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
        <result property="updateBy" column="update_by"/>
        <result property="updateTime" column="update_time"/>
        <result property="deleted" column="deleted"/>
        <result property="moneyDate" column="money_date"/>
        <result property="classType" column="class_type"/>
    </resultMap>

    <sql id="selectAccountMoneyVo">
        select id,
               account_id,
               class_id,
               money as money,
               money_introduce,
               is_total,
               create_by,
               create_time,
               update_by,
               update_time,
               deleted,
               money_date
        from account_money
    </sql>

    <select id="selectAccountMoneyList" parameterType="com.ruoyi.project.emmanuel.account.domain.AccountMoney"
            resultMap="AccountMoneyResult">
        SELECT m.id,
        m.account_id,
        m.class_id,
        m.money as money,
        m.money_introduce,
        m.is_total,
        m.money_date,
        m.create_by,
        m.create_time,
        m.update_by,
        m.update_time,
        m.deleted,
        c.class_type                                                           "class_type",
        c.class_name                                                           "className"
        FROM account_class c
        LEFT JOIN account_money m ON c.id = m.class_id
        <where>
            <if test="accountId != null ">
                and m.account_id = #{accountId}
            </if>
            <if test="classId != null ">
                and m.class_id = #{classId}
            </if>
            <if test="moneyIntroduce != null  and moneyIntroduce != ''">
                and m.money_introduce like concat('%',#{moneyIntroduce},'%')
            </if>
            <if test="isTotal != null ">
                and m.is_total = #{isTotal}
            </if>
            <if test="moneyDate != null ">
                and m.money_date = #{moneyDate,jdbcType=TIMESTAMP}
            </if>
        </where>
        order by m.money_date desc,m.create_time desc
    </select>

    <select id="selectAccountMoneyById" parameterType="Long" resultMap="AccountMoneyResult">
        SELECT m.id,
               m.account_id,
               m.class_id,
               m.money as money,
               m.money_introduce,
               m.is_total,
               m.money_date,
               m.deleted,
               c.class_type                       "class_type"
        FROM account_class c
                 LEFT JOIN account_money m ON c.id = m.class_id
        where m.id = #{id}
    </select>

    <insert id="insertAccountMoney" parameterType="com.ruoyi.project.emmanuel.account.domain.AccountMoney">
        insert into account_money
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="money != null">
                money,
            </if>
            <if test="moneyDate != null">
                money_date,
            </if>
            <if test="id != null">
                id,
            </if>
            <if test="accountId != null">
                account_id,
            </if>
            <if test="classId != null">
                class_id,
            </if>
            <if test="moneyIntroduce != null">
                money_introduce,
            </if>
            <if test="isTotal != null">
                is_total,
            </if>
            <if test="createBy != null">
                create_by,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateBy != null">
                update_by,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="deleted != null">
                deleted,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="money != null">
                #{money,jdbcType=DECIMAL},
            </if>
            <if test="moneyDate != null">
                #{moneyDate,jdbcType=TIMESTAMP},
            </if>
            <if test="id != null">
                #{id},
            </if>
            <if test="accountId != null">
                #{accountId},
            </if>
            <if test="classId != null">
                #{classId},
            </if>

            <if test="moneyIntroduce != null">
                #{moneyIntroduce},
            </if>
            <if test="isTotal != null">
                #{isTotal},
            </if>
            <if test="createBy != null">
                #{createBy},
            </if>
            <if test="createTime != null">
                #{createTime},
            </if>
            <if test="updateBy != null">
                #{updateBy},
            </if>
            <if test="updateTime != null">
                #{updateTime},
            </if>
            <if test="deleted != null">
                #{deleted},
            </if>
        </trim>
    </insert>

    <update id="updateAccountMoney" parameterType="com.ruoyi.project.emmanuel.account.domain.AccountMoney">
        update account_money
        <trim prefix="SET" suffixOverrides=",">
            <if test="money != null">
                money = #{money,jdbcType=DECIMAL},
            </if>
            <if test="moneyDate != null">
                money_date = #{moneyDate,jdbcType=TIMESTAMP},
            </if>
            <if test="accountId != null">
                account_id = #{accountId},
            </if>
            <if test="classId != null">
                class_id = #{classId},
            </if>
            <if test="moneyIntroduce != null">
                money_introduce = #{moneyIntroduce},
            </if>
            <if test="isTotal != null">
                is_total = #{isTotal},
            </if>
            <if test="createBy != null">
                create_by = #{createBy},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="deleted != null">
                deleted = #{deleted},
            </if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteAccountMoneyById" parameterType="Long">
        delete
        from account_money
        where id = #{id}
    </delete>

    <delete id="deleteAccountMoneyByIds" parameterType="String">
        delete from account_money where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="getPreWeekBill" resultType="map">
        select m.account_id                                          as "accountId",
        m.money_date                                          as moneyDate,
        a.account_name                                        as accountName,
        case when c.status = '1' then sum(m.money) else 0 end as moneyIncome,
        case when c.status = '2' then sum(m.money) else 0 end as moneyPay,
        case when c.status = '3' then sum(m.money) else 0 end as moneyIgnore
        from account_account a
        inner join account_money m on a.id = m.account_id
        inner join account_class c on c.id = m.class_id
        WHERE m.deleted = 0
        and is_total = 0
        AND m.money_date BETWEEN DATE_FORMAT(#{startDate},'%Y-%m-%d') AND  DATE_FORMAT(#{endtDate} ,'%Y-%m-%d')
        group by c.status, money_date, a.account_name, m.account_id
        union
        select m.account_id                                   as "accountId",
        ''                                                    as moneyDate,
        '总 计'                                               as accountName,
        case when c.status = '1' then sum(m.money) else 0 end as moneyIncome,
        case when c.status = '2' then sum(m.money) else 0 end as moneyPay,
        case when c.status = '3' then sum(m.money) else 0 end as moneyIgnore
        from account_account a
        inner join account_money m on a.id = m.account_id
        inner join account_class c on c.id = m.class_id
        WHERE m.deleted = 0
        and is_total = 0
        AND m.money_date BETWEEN DATE_FORMAT(#{startDate},'%Y-%m-%d') AND  DATE_FORMAT(#{endtDate} ,'%Y-%m-%d')
        group by m.account_id ,c.status
    </select>

    <select id="getUserMail" resultType="java.lang.String">
        SELECT DISTINCT u.email
                        -- m.create_by,
        FROM account_money m
                 INNER JOIN sys_user u on m.create_by = u.login_name
        WHERE u.del_flag = 0
           and m.account_id = #{accountId,jdbcType=VARCHAR}
           AND m.money_date BETWEEN DATE_FORMAT(#{preWeekMonday,jdbcType=TIMESTAMP},'%Y-%m-%d') AND date_add(DATE_FORMAT(#{preWeekMonday,jdbcType=TIMESTAMP},'%Y-%m-%d'), interval 6 day)
    </select>
</mapper>
