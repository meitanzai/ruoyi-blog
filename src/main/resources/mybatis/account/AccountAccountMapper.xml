<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.emmanuel.account.mapper.AccountAccountMapper">
    <resultMap type="com.ruoyi.project.emmanuel.account.domain.AccountAccount" id="AccountAccountResult">
        <result property="id" column="id"/>
        <result property="cover" column="cover"/>
        <result property="accountName" column="account_name"/>
        <result property="accountIntroduce" column="account_introduce"/>
        <result property="visible" column="visible"/>
        <result property="orderNum" column="order_num"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
        <result property="updateBy" column="update_by"/>
        <result property="updateTime" column="update_time"/>
        <result property="administrators" column="administrators"/>
    </resultMap>

    <sql id="selectAccountAccountVo">
        select id,
               cover,
               account_name,
               account_introduce,
               visible,
               order_num,
               create_by,
               create_time,
               update_by,
               update_time
        from account_account
    </sql>

    <select id="selectAccountAccountList" parameterType="com.ruoyi.project.emmanuel.account.domain.AccountAccount"
            resultMap="AccountAccountResult">
        select a.id,
        a.cover,
        a.account_name,
        a.account_introduce,
        a.visible,
        a.order_num,
        a.create_by,
        a.create_time,
        a.update_by,
        a.update_time,
        ua.administrators
        from account_account a
        inner join account_user_account ua on a.id = ua.account_id
        <where>
            and ua.user_id = #{userId,jdbcType=BIGINT}
            <if test="cover != null  and cover != ''">
                and a.cover = #{cover}
            </if>
            <if test="accountName != null  and accountName != ''">
                and a.account_name like concat('%', #{accountName}, '%')
            </if>
            <if test="accountIntroduce != null  and accountIntroduce != ''">
                and a.account_introduce = #{accountIntroduce}
            </if>
            <if test="visible != null  and visible != ''">
                and a.visible = #{visible}
            </if>
            <if test="orderNum != null ">
                and a.order_num = #{orderNum}
            </if>
        </where>
        order by order_num
    </select>

    <select id="selectAccountAccountById" parameterType="Long" resultMap="AccountAccountResult">
        <include refid="selectAccountAccountVo"/>
        where id = #{id}
    </select>

    <insert id="insertAccountAccount" parameterType="com.ruoyi.project.emmanuel.account.domain.AccountAccount"
            useGeneratedKeys="true" keyProperty="id">
        insert into account_account
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="cover != null">
                cover,
            </if>
            <if test="accountName != null and accountName != ''">
                account_name,
            </if>
            <if test="accountIntroduce != null">
                account_introduce,
            </if>
            <if test="visible != null and visible != ''">
                visible,
            </if>
            <if test="orderNum != null">
                order_num,
            </if>
            <if test="createBy != null">
                create_by,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateBy != null">
                update_by,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="cover != null">
                #{cover},
            </if>
            <if test="accountName != null and accountName != ''">
                #{accountName},
            </if>
            <if test="accountIntroduce != null">
                #{accountIntroduce},
            </if>
            <if test="visible != null and visible != ''">
                #{visible},
            </if>
            <if test="orderNum != null">
                #{orderNum},
            </if>
            <if test="createBy != null">
                #{createBy},
            </if>
            <if test="createTime != null">
                #{createTime},
            </if>
            <if test="updateBy != null">
                #{updateBy},
            </if>
            <if test="updateTime != null">
                #{updateTime},
            </if>
        </trim>
    </insert>

    <update id="updateAccountAccount" parameterType="com.ruoyi.project.emmanuel.account.domain.AccountAccount">
        update account_account
        <trim prefix="SET" suffixOverrides=",">
            <if test="cover != null">
                cover = #{cover},
            </if>
            <if test="accountName != null and accountName != ''">
                account_name = #{accountName},
            </if>
            <if test="accountIntroduce != null">
                account_introduce = #{accountIntroduce},
            </if>
            <if test="visible != null and visible != ''">
                visible = #{visible},
            </if>
            <if test="orderNum != null">
                order_num = #{orderNum},
            </if>
            <if test="createBy != null">
                create_by = #{createBy},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteAccountAccountById" parameterType="Long">
        delete
        from account_account
        where id = #{id}
    </delete>

    <delete id="deleteAccountAccountByIds" parameterType="String">
        delete from account_account where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="isExist" resultMap="AccountAccountResult"
            parameterType="com.ruoyi.project.emmanuel.account.domain.AccountAccount">
        SELECT visible
        FROM account_account
        <where>
            account_name = #{accountName,jdbcType=VARCHAR}
            <if test="id != null and id != ''"  >AND id != #{id,jdbcType=BIGINT}</if>
        </where>
        LIMIT 1;
    </select>

    <select id="selectAccountNameById" resultMap="AccountAccountResult">
        SELECT id,account_name,visible from account_account aa inner join account_user_account aua on aa.id = aua.account_id where aa.id = #{id,jdbcType=BIGINT}
            <if test="userId != null">
                and aua.user_id = #{userId,jdbcType=BIGINT}
            </if>
        limit 1
    </select>

    <select id="isAccountVisible" resultType="java.lang.String">
        SELECT visible from account_account WHERE id = #{accountId,jdbcType=BIGINT}
    </select>

    <select id="accountCountByClass" resultType="java.util.Map">
        select c.id,
               c.class_name as className,
               sum(m.money) as money,
               c.class_type as "classType",
               c.status     as "status",
               c.order_num as "orderNum"
        from account_class c
                 inner join account_money m on c.id = m.class_id
        where m.account_id = #{accountId,jdbcType=BIGINT}
          and m.deleted = 0
          and is_total = 0
        group by c.id, c.class_name
    </select>

    <select id="accountCountByImonth" resultType="java.util.Map">
        select
            ifnull(sum(if(c.status = '1' ,m.money,null)),0) as moneyIncome,
            ifnull(sum(if(c.status = '2' ,m.money,null)),0) as moneyPay,
            ifnull(sum(if(c.status = '3' ,m.money,null)),0) as moneyIgnore,
            date_format(m.money_date,'%Y-%m') as "moneyDate"
        from account_class c
                 inner join account_money m on c.id = m.class_id
        where m.account_id = #{accountId}
          and m.deleted = 0 and is_total = 0
        group by date_format(m.money_date,'%Y-%m')
    </select>

    <select id="selectAllocatedList" resultType="com.ruoyi.project.system.user.domain.User">
        select distinct u.user_id,
                        u.dept_id,
                        u.login_name,
                        u.user_name,
                        u.user_type,
                        u.email,
                        u.avatar,
                        u.phonenumber,
                        u.status,
                        u.create_time
        from sys_user u
                 inner join account_user_account ua on u.user_id = ua.user_id
                 left join account_account a on a.id = ua.account_id
        where u.del_flag = '0' and ua.account_id = #{accountId,jdbcType=BIGINT}
        <if test="loginName != null and loginName != ''">
            AND u.login_name like concat('%', #{loginName}, '%')
        </if>
        <if test="phonenumber != null and phonenumber != ''">
            AND u.phonenumber like concat('%', #{phonenumber}, '%')
        </if>
    </select>

    <delete id="deleteUserRoleInfo">
        delete from account_user_account where user_id=#{userId} and account_id=#{accountId}
    </delete>

    <delete id="deleteUserRoleInfos">
        delete from account_user_account where account_id=#{accountId} and user_id in
        <foreach collection="userIds" item="userId" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </delete>

    <select id="selectUnallocatedList" resultType="com.ruoyi.project.system.user.domain.User">
        select distinct u.user_id,
                        u.dept_id,
                        u.login_name,
                        u.user_name,
                        u.user_type,
                        u.email,
                        u.avatar,
                        u.phonenumber,
                        u.status,
                        u.create_time
        from sys_user u
                 left join account_user_account ua on u.user_id = ua.user_id
                 left join account_account a on a.id = ua.account_id
        where u.del_flag = '0'
          and u.user_id not in (select ux.user_id
        from sys_user ux
        inner join account_user_account uax
        on ux.user_id = uax.user_id and uax.account_id = #{accountId,jdbcType=BIGINT})
        <if test="loginName != null and loginName != ''">
            AND u.login_name like concat('%', #{loginName}, '%')
        </if>
        <if test="phonenumber != null and phonenumber != ''">
            AND u.phonenumber like concat('%', #{phonenumber}, '%')
        </if>
    </select>

    <insert id="batchUserAccount">
        insert into account_user_account (user_id, account_id) values
        <foreach item="item" index="index" collection="userAccountList" separator=",">
            (#{item.userId},#{item.accountId})
        </foreach>
        ON DUPLICATE KEY UPDATE
        user_id = VALUES(user_id),account_id = VALUES(account_id)
    </insert>

    <insert id="insertUserAccount" parameterType="com.ruoyi.project.emmanuel.account.domain.UserAccount">
        insert into account_user_account (user_id, account_id,administrators)
        values (#{userId},#{accountId},#{administrators})
            ON DUPLICATE KEY UPDATE
                                 user_id = VALUES(user_id),account_id = VALUES(account_id),administrators = values(administrators)
    </insert>

    <select id="selectUserAccount" resultType="com.ruoyi.project.emmanuel.account.domain.UserAccount">
        select user_id as "userId", account_id as "accountId", administrators
        from account_user_account
        where account_id = #{accountId}
          and user_id = #{userId}
    </select>
</mapper>
